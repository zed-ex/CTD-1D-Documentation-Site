{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for CTD 1D Project","text":""},{"location":"#project-team-11c","title":"Project Team 11C","text":"<ul> <li>Afrith Ahamed A. (1008109) </li> <li>Darrell Lu Jun Qiang (1007857)</li> <li>Khoo Li Cheng Dylan (1005088)</li> <li>Tan Tian Kovan (1007519)</li> <li>Varsha Ramesh (1008477)</li> <li>Chong Zhi Xun (1008140)</li> </ul>"},{"location":"#description","title":"Description","text":""},{"location":"#background","title":"Background","text":"<p>Originally conceived in March 2014 by game developer Gabriele Cirulli, the 2048 game emerged as a personal project. Drawing inspiration from the mechanics of Threes, this web-based, open-source game challenged players to merge numbered tiles through grid-based manoeuvres, with the ultimate goal of attaining the coveted 2048 tile. Its engaging gameplay and strategic elements propelled 2048 to rapid popularity.</p>"},{"location":"#scenario-and-target-user","title":"Scenario and Target User","text":"<p>Tailored for individuals seeking intellectual stimulation, 2048 caters to puzzle enthusiasts, cerebral gamers, students looking to enhance cognitive skills, and professionals in search of a mentally invigorating break. In today's fast-paced lifestyles, users yearn for accessible activities that blend entertainment with cognitive exercise, making 2048 an ideal choice.</p>"},{"location":"#purpose-and-benefits","title":"Purpose and Benefits","text":"<p>Positioned as a tool for brain exercise, 2048 is designed to enhance strategic thinking and problem-solving abilities. Users engaging with the game undergo a mental exercise, refining decision-making skills, pattern recognition, and logical thinking. The software provides a platform for users to strategize, plan ahead, and adapt tactics, fostering cognitive development.</p>"},{"location":"#how-to-use-gameplay","title":"How to Use / Gameplay","text":"<p>Navigate the game by sliding numbered tiles across a grid. Merge identical tiles to create a new tile with a sum value, striving to reach the elusive 2048 tile through strategic manoeuvres. Beyond personal development, 2048 introduces a competitive edge with score rankings, encouraging friendly competition among peers. The game's vibrant colour aesthetic further appeals to children, making it an engaging and educational pastime for childhood development in critical thinking.</p>"},{"location":"#references","title":"References:","text":"<p>YouTube. (2020, May 15). How to build 2048 in 20 minutes (python and tkinter tutorial). YouTube. https://www.youtube.com/watch?v=b4XP2IcI-Bg</p>"},{"location":"database/","title":"Database","text":""},{"location":"database/#def-update_scoreusername-user_score","title":"def update_score(username, user_score)","text":"<p>Updates database with the score and player name.</p> <pre><code>def update_score(username, user_score):\n\n    \"\"\"Updates the database with the score and player name.\n       Adds the score to the latest scores list and boots the oldest score.\n       If the score is higher than any of the scores in the high score leaderboard,\n       boots the lowest score in the high score leaderboard and inserts the new score.\n       Equal scores will prioritise the score submitted earlier on the high score leaderboard.\"\"\"\n\n    firebase = pyrebase.initialize_app(config)\n    auth = firebase.auth()\n    user = auth.sign_in_with_email_and_password(email, password)\n    db = firebase.database()\n    user = auth.refresh(user['refreshToken'])\n\n    # Get the user's score from function call.\n    # Encodes the user's name, score and time into a string.\n    new_score = \"{},{},{}\".format(username, str(user_score), time())\n\n    # Check if the user's score is worthy of the leaderboard, from the top down.\n    for user_score_i in range(1, scoreboard_size + 1):\n        node_hs = db.child(key_hs + str(user_score_i)).get(user['idToken'])\n        # Scores in the database are saved in the format: highScoresi:username,user_score,time\n        highscore_i = node_hs.val()\n\n        # First checks if there is an entry in the current index, if there is, assign the score within to the variable.\n        if highscore_i:\n            highscore_i_value = int(highscore_i.split(\",\")[1])\n        else:\n            highscore_i_value = 0\n\n        # The list is already sorted from highest to lowest, so if the user score is higher than an entry, all further\n        # entries will be lower. If no such entry is found, the user score does not get added to the leaderboard.\n\n        next_score = new_score\n        if user_score &gt; highscore_i_value:\n            # Moves all entries down by one index. The last entry gets removed as it is not re-added to the database.\n            for j in range(user_score_i, scoreboard_size + 1):\n                node_hs_shift = db.child(key_hs + str(j)).get(user['idToken'])\n                placeholder_score = node_hs_shift.val()\n                db.child(key_hs + str(j)).set(next_score, user['idToken'])\n                next_score = placeholder_score\n            break\n\n    # Resets the next_score variable to be the previously submitted score.\n    next_score = new_score\n\n    # Inserts the score into the list of the latest entries. Again, the last entry gets removed.\n    for user_score_i in range(1, scoreboard_size + 1):\n        node_ls = db.child(key_ls + str(user_score_i)).get(user['idToken'])\n        placeholder_score = node_ls.val()\n        db.child(key_ls + str(user_score_i)).set(next_score, user['idToken'])\n        next_score = placeholder_score\n\n</code></pre>"},{"location":"database/#def-fetch_high_scores","title":"def fetch_high_scores()","text":"<p>Fetches high scores from database.</p> <pre><code>def fetch_high_scores():\n\n    \"\"\"Returns a list of lists of the 10 highest scores, from highest to lowest.\n       e.g. [['hello', 2000, 1701536578.6759918], ['greetings', 1984, 1801536578.6759918]]\"\"\"\n\n    firebase = pyrebase.initialize_app(config)\n    auth = firebase.auth()\n    user = auth.sign_in_with_email_and_password(email, password)\n    db = firebase.database()\n    user = auth.refresh(user['refreshToken'])\n\n    highscore_list = []\n    for list_index in range(1, scoreboard_size + 1):\n        node_hs = db.child(key_hs + str(list_index)).get(user['idToken'])\n        if node_hs.val():\n            name, score, record_time = node_hs.val().split(\",\")\n            # Variables exist in the database as encoded strings, so here we re-add their types.\n            score = int(score)\n            record_time = float(record_time)\n            highscore_list.append([name, score, record_time])\n\n    # Placeholder function to format list into string.\n    highscore_list = leaderboard_format(highscore_list)\n\n    return highscore_list\n\n</code></pre>"},{"location":"database/#def-fetch_latest_scores","title":"def fetch_latest_scores()","text":"<p>Fetches most recent scores.</p> <pre><code>def fetch_latest_scores():\n\n    \"\"\"Returns a list of lists of the 10 latest scores, from latest to earliest.\n       e.g. [['hello', 2000, 1701536578.6759918], ['greetings', 1984, 1801536578.6759918]]\"\"\"\n\n    firebase = pyrebase.initialize_app(config)\n    auth = firebase.auth()\n    user = auth.sign_in_with_email_and_password(email, password)\n    db = firebase.database()\n    user = auth.refresh(user['refreshToken'])\n\n    latest_scores_list = []\n    for list_index in range(1, scoreboard_size + 1):\n        node_ls = db.child(key_ls + str(list_index)).get(user['idToken'])\n        if node_ls.val():\n            name, score, record_time = node_ls.val().split(\",\")\n            # Variables exist in the database as encoded strings, so here we re-add their types.\n            score = int(score)\n            record_time = float(record_time)\n            latest_scores_list.append([name, score, record_time])\n\n    # Placeholder function to format list into string.\n    latest_scores_list = leaderboard_format(latest_scores_list)\n\n    return latest_scores_list\n</code></pre>"},{"location":"database/#def-leaderboard_formatscore_list","title":"def leaderboard_format(score_list)","text":"<p>Formats leaderboard.</p> <pre><code>def leaderboard_format(score_list):\n\n    \"\"\"Takes in the score list from fetch_high_scores() or fetch_latest_scores()\n       and returns a formatted string that fits into the set text box from 2048.py.\"\"\"\n\n    formatted_string = []\n    for score in score_list:\n        spaces = \" \" * (50 - len(score[0]) - len(str(score[1])))\n        formatted_string.append(score[0] + spaces + str(score[1]))\n\n    return formatted_string\n</code></pre>"},{"location":"ending/","title":"Ending","text":""},{"location":"ending/#def-initself-master-none","title":"def init(self, master = None)","text":"<p>Initialise Ending Tkinter frame.</p> <pre><code>def __init__(self, master = None):\n    # Initialize the frame with background color and grid settings\n    tk.Frame.__init__(self, master, bg='#CA6680')\n    self.grid(sticky=\"nsew\")\n    self.master.columnconfigure(0, weight=1)\n    self.master.rowconfigure(0, weight=1)\n    self.master.geometry(\"500x500\")\n    self.master.title('CTD 1D Project Team 11C')\n</code></pre>"},{"location":"ending/#tklabelparam__valuesplacepositioning_params","title":"tk.Label(param_&amp;_values).place(positioning_params)","text":"<p>The Labels made are displayed to the user as follows: \"Thank you for playing\", \"Credits\", \"Team member names + (student ID)\"</p> <pre><code>    ### Labels for the ending screen\n    self.label = tk.Label(\n        self, \n        text=\"THANK YOU FOR PLAYING!\", \n        font=c.SCORE_LABEL_FONT\n        bg='#CA6680'\n        ).place(relx=0.5, rely=0.05, anchor=tk.CENTER)\n\n    self.label1 = tk.Label(\n        self, \n        text=\"CREDITS:\", \n        font=c.SCORE_LABEL_FONT\n        bg='#CA6680'\n        ).place(relx=0.5, rely=0.15, anchor=tk.CENTER)\n\n    self.label2 = tk.Label(\n        self, \n        text=\"1. Afrith Ahamed A. (1008109)\\n\\n 2. Darrell Lu Jun Qiang (1007857)\\n\\n 3. Khoo Li Cheng Dylan (1005088)\\n\\n 4. Tan Tian Kovan (1007519)\\n\\n 5. Varsha Ramesh (1008477)\\n\\n 6. Chong Zhi Xun (1008140)\", \n        font=c.USERNAME_LABEL\n        bg='#93B7BE'\n        ).place(relx=0.5, rely=0.4, anchor=tk.CENTER)\n</code></pre>"},{"location":"ending/#tkbuttonparam__valuesplacepositioning_params","title":"tk.Button(param_&amp;_values).place(positioning_params)","text":"<p>self.play_agn_btn: This interface calls the method confirm_prompt() upon being pressed to open a new window to display the messagebox.askyesorno.</p> <p>self.back_btn: This interface calls the method goBack() upon being pressed to transition to the previous UI window.</p> <pre><code>    ### Return to Game Btn with confirmation prompt\n    self.play_agn_btn = tk.Button(\n        self, \n        text=\"PLAY AGAIN?\",\n        font=c.NEXT_BTN,\n        border=5,\n        command=self.confirm_prompt\n        ).place(relx=0.85, rely=0.71, anchor=tk.CENTER)\n\n    ### Button to go back to the scores screen\n    self.back_btn = tk.Button(\n        self,\n        text=\"&lt; BACK\",\n        font=c.NEXT_BTN,\n        border=5,\n        command=self.goBack\n        ).place(relx=0.15, rely=0.71, anchor=tk.CENTER)\n</code></pre>"},{"location":"ending/#def-confirm_promptself","title":"def confirm_prompt(self)","text":"<p>Messagebox to confirm if the user wishes to play again. If yes, the method show_game() will be called. If no, the system will close and return the user to the terminal.</p> <pre><code># Method to display a confirmation prompt before playing again\ndef confirm_prompt(self):\n    response = messagebox.askyesno(\"Play Again :))\", \"Are You Sure You Want To Play Again?\")\n    if (response == 1):\n        self.show_game()\n    elif (response == 0):\n        sys.exit()\n</code></pre>"},{"location":"ending/#def-gobackself","title":"def goBack(self)","text":"<p>The method destroys the current window and opens up the Scores() Class as the new window.</p> <pre><code># Method to go back to the scores screen\ndef goBack(self):\n    self.master.destroy()\n    scores_window = Scores()\n    scores_window.mainloop()\n</code></pre>"},{"location":"ending/#def-show_gameself","title":"def show_game(self)","text":"<p>The method destroys the current window and opens up the Game() Class as the new window.</p> <pre><code># Method to start a new game\ndef show_game(self):\n    self.master.destroy()\n    ending_window = Game()\n    ending_window.mainloop()\n</code></pre>"},{"location":"game/","title":"Game","text":""},{"location":"game/#def-initself-master-none","title":"def init(self, master = None)","text":"<p>Initialise Game Tkinter frame.</p> <pre><code>def __init__(self, master = None):\n    # Initialize the frame\n    tk.Frame.__init__(self, master)\n    self.grid()\n    self.master.title('CTD 1D Project Team 11C')\n\n    # Create the main grid for the game\n    self.main_grid = tk.Frame(\n        self, \n        bg=c.GRID_COLOR, \n        bd=3, \n        width=400, \n        height=400\n        )\n    self.main_grid.grid(pady=(100, 0))\n    self.make_GUI()\n    self.start_game()\n\n    # Bind arrow keys to game actions\n    self.master.bind(\"&lt;Left&gt;\", self.left)\n    self.master.bind(\"&lt;Right&gt;\", self.right)\n    self.master.bind(\"&lt;Up&gt;\", self.up)\n    self.master.bind(\"&lt;Down&gt;\", self.down)\n\n</code></pre>"},{"location":"game/#def-make_guiself","title":"def make_GUI(self):","text":"<p>Initialise Game Tkinter frame and create Score Header.</p> <pre><code>def make_GUI(self):   \n    ### Make Grid Layout ###\n    # Create grid cells\n    self.cells = []\n    for i in range(4):\n        row = []\n        for j in range(4):\n            cell_frame = tk.Frame(\n                self.main_grid,\n                bg=c.EMPTY_CELL_COLOR,\n                width=100,\n                height=100\n                )\n\n            cell_frame.grid(\n                row=i, \n                column=j, \n                padx=5, \n                pady=5\n                )\n\n            cell_number = tk.Label(\n                self.main_grid, \n                bg=c.EMPTY_CELL_COLOR\n                )\n\n            cell_number.grid(\n                row=i, \n                column=j\n                )\n            cell_data = {\"frame\": cell_frame, \"number\": cell_number}\n            row.append(cell_data)\n        self.cells.append(row)\n\n    ### Make Score Header ###\n    # Create score header\n    score_frame = tk.Frame(self)\n    score_frame.place(\n        relx=0.5, \n        y=40, \n        anchor=\"center\"\n        )\n    tk.Label(\n        score_frame,\n        text=\"SCORE\",\n        font=c.SCORE_LABEL_FONT).grid(\n        row=0\n        )\n    self.score_label = tk.Label(\n        score_frame, \n        text=\"0\", \n        font=c.SCORE_FONT\n        )\n    self.score_label.grid(row=1)\n</code></pre>"},{"location":"game/#def-start_gameself","title":"def start_game(self):","text":"<p>Start game logic.</p> <pre><code>def start_game(self):\n    ### Create Matrix of Zeroes ###\n    self.matrix = [[0] * 4 for _ in range(4)]\n\n    ### Fill 2 random cells with 2s\n    row = random.randint(0, 3)\n    col = random.randint(0, 3)\n    self.matrix[row][col] = 2\n    self.cells[row][col][\"frame\"].configure(bg=c.CELL_COLORS[2])\n    self.cells[row][col][\"number\"].configure(\n        bg=c.CELL_COLORS[2],\n        fg=c.CELL_NUMBER_COLORS[2],\n        font=c.CELL_NUMBER_FONTS[2],\n        text=\"2\"\n        )\n    while(self.matrix[row][col] != 0):\n        row = random.randint(0, 3)\n        col = random.randint(0, 3)\n    self.matrix[row][col] = 2\n    self.cells[row][col][\"frame\"].configure(bg=c.CELL_COLORS[2])\n    self.cells[row][col][\"number\"].configure(\n        bg=c.CELL_COLORS[2],\n        fg=c.CELL_NUMBER_COLORS[2],\n        font=c.CELL_NUMBER_FONTS[2],\n        text=\"2\"\n        )\n\n    # Initialize the score\n    self.score = 0\n\n</code></pre>"},{"location":"game/#def-stackself","title":"def stack(self)","text":"<p>Matrix Manipulation Function</p> <pre><code>def stack(self):\n    # Stack non-zero values to the left\n    new_matrix = [[0] * 4 for _ in range(4)]\n    for i in range(4):\n        fill_position = 0\n        for j in range(4):\n            if self.matrix[i][j] != 0:\n                new_matrix[i][fill_position] = self.matrix[i][j]\n                fill_position += 1\n    self.matrix = new_matrix\n</code></pre>"},{"location":"game/#def-combineself","title":"def combine(self)","text":"<p>Combine two tiles together and sum the values of the tiles.</p> <pre><code>def combine(self):\n    # Combine adjacent equal values\n    for i in range(4):\n        for j in range(3):\n            if self.matrix[i][j] != 0 and self.matrix[i][j] == self.matrix[i][j + 1]:\n                self.matrix[i][j] *= 2\n                self.matrix[i][j + 1] = 0\n                self.score += self.matrix[i][j]\n</code></pre>"},{"location":"game/#def-reverseself","title":"def reverse(self)","text":"<p>Reverse function.</p> <pre><code> def reverse(self):\n    # Reverse the order of values in each row\n    new_matrix = []\n    for i in range(4):\n        new_matrix.append([])\n        for j in range(4):\n            new_matrix[i].append(self.matrix[i][3 - j])\n    self.matrix = new_matrix\n</code></pre>"},{"location":"game/#def-transposeself","title":"def transpose(self)","text":"<p>Transpose function.</p> <pre><code>def transpose(self):\n    # Transpose the matrix\n    new_matrix = [[0] * 4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            new_matrix[i][j] = self.matrix[j][i]\n    self.matrix = new_matrix\n</code></pre>"},{"location":"game/#def-add_new_titleself","title":"def add_new_title(self)","text":"<p>Add a new 2 or 4 tile randomly to an empty cell.</p> <pre><code>def add_new_tile(self):\n    if any(0 in row for row in self.matrix):\n        row = random.randint(0, 3)\n        col = random.randint(0, 3)\n        while(self.matrix[row][col] != 0):\n            row = random.randint(0, 3)\n            col = random.randint(0, 3)\n        self.matrix[row][col] = random.choice([2, 4])\n</code></pre>"},{"location":"game/#def-update_guiself","title":"def update_GUI(self)","text":"<p>Update the GUI to match the matrix.</p> <pre><code>def update_GUI(self):\n    for i in range(4):\n        for j in range(4):\n            cell_value = self.matrix[i][j]\n            if cell_value == 0:\n                self.cells[i][j][\"frame\"].configure(bg=c.EMPTY_CELL_COLOR)\n                self.cells[i][j][\"number\"].configure(\n                    bg=c.EMPTY_CELL_COLOR, \n                    text=\"\"\n                    )\n            else:\n                self.cells[i][j][\"frame\"].configure(bg=c.CELL_COLORS[cell_value])\n                self.cells[i][j][\"number\"].configure(\n                    bg=c.CELL_COLORS[cell_value],\n                    fg=c.CELL_NUMBER_COLORS[cell_value],\n                    font=c.CELL_NUMBER_FONTS[cell_value],\n                    text=str(cell_value)\n                    )\n    self.score_label.configure(text=self.score)        \n    global scoreValue\n    scoreValue = self.score_label.cget(\"text\")\n    self.update_idletasks()\n</code></pre>"},{"location":"game/#def-leftself-event","title":"def left(self, event)","text":"<p>Left-arrow key function.</p> <pre><code>def left(self, event):\n    # Move left\n    self.stack()\n    self.combine()\n    self.stack()\n    self.add_new_tile()\n    self.update_GUI()\n    self.game_over()\n</code></pre>"},{"location":"game/#def-rightself-event","title":"def right(self, event)","text":"<p>Right-arrow key function.</p> <pre><code>def right(self, event):\n    # Move right\n    self.reverse()\n    self.stack()\n    self.combine()\n    self.stack()\n    self.reverse()\n    self.add_new_tile()\n    self.update_GUI()\n    self.game_over()\n</code></pre>"},{"location":"game/#def-upself-event","title":"def up(self, event)","text":"<p>Up-arrow key function.</p> <pre><code>def up(self, event):\n    # Move up\n    self.transpose()\n    self.stack()\n    self.combine()\n    self.stack()\n    self.transpose()\n    self.add_new_tile()\n    self.update_GUI()\n    self.game_over()\n</code></pre>"},{"location":"game/#def-downself-event","title":"def down(self, event)","text":"<p>Down-arrow key function.</p> <pre><code>def down(self, event):\n    # Move down\n    self.transpose()\n    self.reverse()        \n    self.stack()\n    self.combine()\n    self.stack()\n    self.reverse()\n    self.transpose()\n    self.add_new_tile()\n    self.update_GUI()\n    self.game_over()\n</code></pre>"},{"location":"game/#def-horizontal_move_existsself","title":"def horizontal_move_exists(self)","text":"<p>Check if any valid horizontal moves exist.</p> <pre><code>def horizontal_move_exists(self):\n    for i in range(4):\n        for j in range(3):\n            if self.matrix[i][j] == self.matrix[i][j + 1]:\n                return True\n    return False\n</code></pre>"},{"location":"game/#def-vertical_move_existsself","title":"def vertical_move_exists(self)","text":"<p>Check if any valid vertical moves exist.</p> <pre><code>def vertical_move_exists(self):\n    for i in range(3):\n        for j in range(4):\n            if self.matrix[i][j] == self.matrix[i + 1][j]:\n                return True\n    return False\n</code></pre>"},{"location":"game/#def-game_overself","title":"def game_over(self)","text":"<p>Check if game is over (win/lose).</p> <pre><code>def game_over(self):\n    if any(2048 in row for row in self.matrix):\n        game_over_frame = tk.Frame(self.main_grid, borderwidth=2)\n        game_over_frame.place(relx=0.5, rely=0.5, anchor=\"center\")\n        tk.Button(\n            game_over_frame,\n            text=\"You Win!\",\n            bg=c.WINNER_BG,\n            fg=c.GAME_OVER_FONT_COLOR,\n            font=c.GAME_OVER_FONT,\n            command=self.show_signup\n            ).pack()\n    elif not any(0 in row for row in self.matrix) and not self.horizontal_move_exists() and not self.vertical_move_exists():\n        game_over_frame = tk.Frame(self.main_grid, borderwidth=2)\n        game_over_frame.place(relx=0.5, rely=0.5, anchor=\"center\")\n        tk.Button(\n            game_over_frame,\n            text=\"Game Over!\",\n            bg=c.LOSER_BG,\n            fg=c.GAME_OVER_FONT_COLOR,\n            font=c.GAME_OVER_FONT,\n            command=self.show_signup\n            ).pack()\n</code></pre>"},{"location":"game/#def-show_signupself","title":"def show_signup(self)","text":"<p>The method destroys the current window and opens up the signUp() Class as the new window.</p> <pre><code>def show_signup(self):\n    # Display the sign-up window\n    self.destroy()\n    signup_window = signUp()\n    signup_window.mainloop()\n</code></pre>"},{"location":"scores/","title":"Scores","text":""},{"location":"scores/#initself-master-none","title":"init(self, master = None)","text":"<p>Initialise Scores Tkinter frame.</p> <pre><code>def __init__(self, master = None):\n    # Initialize the frame with background color and grid settings\n    tk.Frame.__init__(self, master, bg='#8447FF')\n    self.grid(sticky=\"nsew\")\n    self.master.columnconfigure(0, weight=1)\n    self.master.rowconfigure(0, weight=1)\n    self.master.geometry(\"500x500\")\n    self.master.title('CTD 1D Project Team 11C')\n</code></pre>"},{"location":"scores/#selfselectiondropdown-tkoptionmenu","title":"self.selectionDropdown = tk.OptionMenu()","text":"<p><code>options</code>: a list containing options available in the dropdown menu.</p> <p><code>self.selected_option</code>: <code>StringVar()</code> is used to track currently selected options in the dropdown menu.</p> <p><code>self.selectionDropdown = tk.OptionMenu()</code>: When an option tracked by <code>StringVar()</code> is selected, the method <code>show()</code> is called to make a query request to the database to retrieve the respective filtered entries of highest score to lowest or the most recent scores.  </p> <pre><code>    ### Dropdown Menu for selecting Leaderboard or Recent Scores\n    options = [\"Leaderboard\", \"Recent Scores\"]     \n\n    self.selected_option = tk.StringVar(self)\n    self.selected_option.set(options[0])\n\n    self.selectionDropdown = tk.OptionMenu(\n        self,\n        self.selected_option,\n        *options,\n        command=self.show\n        )\n    self.selectionDropdown.config(font=c.SCORE_LABEL_FONT)\n    self.selectionDropdown.place(relx=0.5, rely=0.05, anchor=tk.CENTER)\n</code></pre>"},{"location":"scores/#selfdisplay_scores-scrolledtextscrolledtext","title":"self.display_scores = scrolledtext.ScrolledText()","text":"<p>The retrieved filtered entries are displayed inside the interface frame and its state is set to 'disabled' to prevent the user from altering the score entries on the interface.</p> <pre><code>    self.display_scores = scrolledtext.ScrolledText(\n        self,\n        wrap=tk.WORD,\n        width=50, \n        height=15, \n        state='disabled',\n        )\n    self.display_scores.place(relx=0.5, rely=0.4, anchor=tk.CENTER)\n</code></pre>"},{"location":"scores/#selfnext_btn","title":"self.next_btn:","text":"<p>This interface calls the method <code>show_ending()</code> upon being pressed to transition to the next UI window.</p> <pre><code>    ### Next Button to navigate to the ending screen \n    self.next_btn = tk.Button(\n        self, \n        text=\"NEXT &gt;\",\n        font=c.NEXT_BTN,\n        border=5,\n        command=self.show_ending\n        ).place(relx=0.85, rely=0.75, anchor=tk.CENTER)\n\n    self.show()\n</code></pre>"},{"location":"scores/#def-showself-args","title":"def show(self, *args)","text":"<p><code>leaderboard_content</code>: <code>db.fetch_high_scores()</code> is a method from the <code>database_interface.py</code> file that is used to query for the top 10 highest scores in the database. </p> <p><code>recent_content</code>: <code>db.fetch_latest_scores()</code> is a method from the <code>database_interface.py</code> file that is used to query for the top 10 most recent scores in the database.</p> <p><code>self.display_scores.configure(state='normal')</code>: enables <code>display_scores</code> to be modified. <code>self.display_scores.configure(state='disabled')</code>: disables <code>display_scores</code> to be modified.</p> <p><code>self.display_scores.delete(1.0, tk.END)</code>: clears the current content in <code>display_scores</code></p> <p><code>self.display_scores.insert(tk.END, row_str + \"\\n\\n\")</code>: inserts a formatted string of each row in <code>display_scores</code></p> <pre><code>def show(self, *args):\n    # Method to handle the dropdown selection and display the corresponding scores\n    selected_option = self.selected_option.get()\n    leaderboard_content = db.fetch_high_scores()\n    recent_content = db.fetch_latest_scores()\n    content = leaderboard_content\n\n    if (selected_option == \"Leaderboard\"):\n        content = leaderboard_content\n        self.selectionDropdown.configure(bg='#D7DAE5')\n        self.display_scores.configure(bg='#D7DAE5')\n    elif (selected_option == \"Recent Scores\"):\n        content = recent_content\n        self.selectionDropdown.configure(bg='#CEB992')\n        self.display_scores.configure(bg='#CEB992')\n\n    # Configure and update the display area with scores\n    self.display_scores.configure(state='normal')\n    self.display_scores.delete(1.0, tk.END)\n    for row in content:\n        row_str = str(row).strip('{}')\n        self.display_scores.insert(tk.END, row_str + \"\\n\\n\")\n    self.display_scores.configure(state='disabled')\n</code></pre>"},{"location":"scores/#def-show_endingself","title":"def show_ending(self)","text":"<p>The method destroys the current window and opens up the <code>Ending()</code> Class as the new window.</p> <pre><code># Method to navigate to the ending screen\ndef show_ending(self):\n    self.destroy()\n    ending_window = Ending()\n    ending_window.mainloop()\n</code></pre>"},{"location":"signup/","title":"Sign Up","text":""},{"location":"signup/#def-initself-master-none","title":"def init(self, master = None)","text":"<p>Initialise SignUp Tkinter frame. </p> <pre><code> def __init__(self, master = None):\n    # Initialize the frame\n    tk.Frame.__init__(self, master, bg='#F2D0A4')\n    self.grid(sticky=\"nsew\")\n    self.master.columnconfigure(0, weight=1)\n    self.master.rowconfigure(0, weight=1)\n    self.master.geometry(\"500x500\")\n    self.master.title('CTD 1D Project Team 11C')\n\n</code></pre>"},{"location":"signup/#tklabelparam__valuesplacepositioning_params","title":"tk.Label(param_&amp;_values).place(positioning_params)","text":"<p>Creation of customization texts to be displayed on the screen with access  to the place method to achieve the desired position of the label element. </p> <pre><code>    ### Label\n    # Create sign-up page layout\n    self.label = tk.Label(\n        self, \n        text=\"Fill in to Record Your Score!\", \n        font=c.SCORE_LABEL_FONT\n        bg='#F7F7FF'\n        ).place(relx=0.5, rely=0.05, anchor=tk.CENTER)\n\n\n    ### Username Label\n    self.entry_label = tk.Label(\n        self, \n        text=\"Username:\",\n        font=c.USERNAME_LABEL\n        bg='#F7F7FF'\n        ).place(relx=0.21, rely=0.28)\n</code></pre>"},{"location":"signup/#tkentryparam__valuesplacepositioning_params-and-def-validate_usernameself-new_value","title":"tk.Entry(param_&amp;_values).place(positioning_params) and def validate_username(self, new_value)","text":"<p>Creation of user input texts to be displayed on the screen with access  to the place method to achieve the desired position of the label element. </p> <p>The overall purpose of this code is to ensure that the user's input in the  Entry widget <code>self.user_entry</code> is validated according to the rules defined in the 'validate_username' function.</p> <p><code>self.register(self.validate_username)</code>: Registers a validation function called <code>validate_username</code>. The register method is used to create a Tcl wrapper for a Python function, making it callable from Tcl (Tool Command Language).</p> <p><code>validate=\"key\"</code>: Specifies that the validation should occur whenever a key is pressed. In other words, the validation function <code>validate_username</code> will be called each time a key is pressed in the Entry widget.</p> <p><code>validatecommand=(validate_cmd, \"%P\")</code>: Specifies the validation command to be executed. %P is a special substitution code that represents the value of the Entry widget if the edit is allowed. Here, it passes the current content of the Entry widget to the validation function.</p> <pre><code>    ### Username Entry\n    validate_cmd = self.register(self.validate_username)\n\n    self.user_entry = tk.Entry(self, validate=\"key\", validatecommand=(validate_cmd, \"%P\"))\n    self.user_entry.place(relx=0.5, rely=0.3, anchor=tk.CENTER)\n</code></pre>"},{"location":"signup/#tkbuttonparam__valuesplacepositioning_params","title":"tk.Button(param_&amp;_values).place(positioning_params)","text":"<p><code>self.submit_btn</code>: This interface calls the method <code>dbUpload()</code> upon being pressed to upload the user's score and username to the database. It is immediately disabled upon submission of the entry to prevent users from submitting multiple scores with the same/different username.</p> <p><code>self.next_btn</code>: This interface calls the method <code>show_scores()</code> upon being pressed to transition to the next UI window.</p> <pre><code>    ### Create submit button\n    self.submit_btn = tk.Button(\n        self,\n        text=\"SUBMIT\",\n        font=c.SUBMIT_BTN,\n        border=3,\n        bg='#C03221', #92374D\n        command=self.dbUpload\n        )\n    self.submit_btn.place(relx=0.72, rely=0.3, anchor=tk.CENTER)\n\n\n    ### Create next button \n    self.next_btn = tk.Button(\n        self, \n        text=\"NEXT &gt;\",\n        font=c.NEXT_BTN,\n        border=5,\n        command=self.show_scores\n        ).place(relx=0.85, rely=0.70, anchor=tk.CENTER)\n</code></pre>"},{"location":"signup/#def-validate_usernameself-new_value","title":"def validate_username(self, new_value)","text":"<p>The function is expected to return a boolean value indicating whether the input is valid or not. If the input is valid, the edit is allowed; otherwise, the edit is rejected. Its purpose is to check if the username length is less than or equal to 20.</p> <pre><code># Validate the length of the username\ndef validate_username(self, new_value):\n        return len(new_value) &lt;= 20\n</code></pre>"},{"location":"signup/#def-dbuploadself","title":"def dbUpload(self)","text":"<p>The method changes the state of the button to disabled preventing further user entries and uploads the user's username and score to the database.  The <code>.strip()</code> method is used to remove any excess spaces before and after the username input. </p> <pre><code>    # Upload the score to the database\n    def dbUpload(self):\n        self.submit_btn.configure(state='disabled')\n        username = self.user_entry.get().strip()\n        db.update_score(username, scoreValue)\n</code></pre>"},{"location":"signup/#def-show_scoresself","title":"def show_scores(self)","text":"<p>The method destroys the current window and opens up the <code>Scores()</code> Class as the new window.</p> <pre><code># Show the scores window\ndef show_scores(self):\n        self.destroy()\n        scores_window = Scores()\n        scores_window.mainloop()\n</code></pre>"},{"location":"splashscreen/","title":"SplashScreen","text":""},{"location":"splashscreen/#def-initself-master-none","title":"def init(self, master = None)","text":"<p>Splashscreen here is the first window that pops up after the entire code has been executed. Once the player clicks start it, the game starts.  Initialise SplashScreen Tkinter frame.</p> <pre><code>def __init__(self, master = None):\n    # Initialize the frame\n    tk.Frame.__init__(self, master)\n    self.grid(sticky=\"nsew\")\n    self.master.geometry(\"600x600\")\n    self.master.configure(background=\"Black\")\n    self.master.title('CTD 1D Project Team 11C')    \n\n    # Set up splash screen layout    \n    width=400\n    height=400  \n</code></pre>"},{"location":"splashscreen/#setting-image-as-the-background","title":"Setting Image as the Background.","text":"<pre><code>    image = Image.open(\"1.jpg\")\n    resize_image = image.resize((width, height))\n    img = ImageTk.PhotoImage(resize_image)\n    label1 = tk.Label(self.master,image=img)\n    label1.image = img\n    label1.place(relx=0.5, rely=0.4, anchor=tk.CENTER)\n</code></pre>"},{"location":"splashscreen/#buttons-to-start-playing-the-game-and-to-quit-the-game-window","title":"Buttons to start playing the Game and to quit the Game Window.","text":"<pre><code>   # Add \"Play\" button \n   self.bt1=tk.Button(\n       self.master,\n       text=\"Play\",\n       width=10,\n        height=2,\n        fg=\"black\",\n        font=(\"OCR A Extended\", 14, \"bold\"),\n        command=self.start\n        )\n    self.bt1.place(relx=0.15, rely=0.8, anchor=tk.CENTER)\n\n    # Add \"Exit\" button        \n    self.exit_button=tk.Button(\n        self.master,\n        text='Exit',\n        font=('OCR A Extended', 14, \"bold\"), \n        bg='gold', \n        bd=5, \n        width=10,\n        height=2,\n        command=self.quit\n        )\n    self.exit_button.place(relx=0.85, rely=0.8, anchor=tk.CENTER)\n</code></pre>"},{"location":"splashscreen/#def-startself","title":"def start(self)","text":"<p>Start the game.</p> <pre><code># Start the game when \"Play\" button is pressed\ndef start(self):\n    self.master.destroy()\n    start_window = Game()\n    start_window.mainloop()\n</code></pre>"},{"location":"splashscreen/#def-quitself","title":"def quit(self)","text":"<p>Quit the game.</p> <pre><code># Quit the application when \"Exit\" button is pressed\ndef quit(self):\n    sys.exit()\n</code></pre>"}]}